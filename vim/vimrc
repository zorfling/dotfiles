set nocompatible               " be iMproved
filetype on
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Plugin 'gmarik/vundle'

" My Bundles here:
"
" original repos on github
Plugin 'tpope/vim-sensible'
Plugin 'scrooloose/nerdtree'
Plugin 'altercation/vim-colors-solarized'
Plugin 'peaksea'
Plugin 'ervandew/supertab'
Plugin 'commentary.vim'
Plugin 'AutoTag'
Plugin 'EasyMotion'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'ryanoasis/vim-devicons'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'keepcase.vim'

" Languages and frameworks
Plugin 'php.vim-for-php5'
Plugin 'html5.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'beyondwords/vim-twig'
Plugin 'rodjek/vim-puppet'
Plugin 'estin/htmljinja'
Plugin 'rails.vim'
Plugin 'tpope/vim-haml'
Plugin 'groenewege/vim-less'
Plugin 'mattn/emmet-vim'
Plugin 'editorconfig-vim'
"Plugin 'zefei/buftabs'
Plugin 'vim-coffee-script'
Plugin 'elzr/vim-json'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'ekalinin/Dockerfile.vim'

au BufRead,BufNewFile *.twig set filetype=htmljinja.html

syntax on
filetype plugin indent on     " required!

" Brief help
" :PluginList          - list configured bundles
" :PluginInstall(!)    - install(update) bundles
" :PluginSearch(!) foo - search(or refresh cache first) for foo
" :PluginClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Plugin command are not allowed..

map [ :bprev<CR>
map ] :bnext<CR>

autocmd FileType nerdtree noremap <buffer> [ <nop>
autocmd FileType nerdtree noremap <buffer> ] <nop>

map + :NERDTreeToggle<CR>
map - :hide<CR>

nmap <bar> :vsplit<cr>
nmap _ :split<cr>

nnoremap <Tab> <C-W>

" Moving lines up and down http://vim.wikia.com/wiki/Moving_lines_up_or_down
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

" Disable visual bell (set bell to visual, then clear) (primarily for lxterminal).
" http://vim.wikia.com/wiki/Disable_beeping
set noerrorbells visualbell t_vb=
if has('autocmd')
   autocmd GUIEnter * set visualbell t_vb=
endif

set tags=./.tags;/

" Open NERDTree if no file specified on open
autocmd vimenter * if !argc() | NERDTree | endif
" Quit all if last buffer is NERDTree (this was closing when destroying any open buffer
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" Control W to close buffer
nnoremap <C-w> :bp<bar>sp<bar>bn<bar>bd<CR><CR>

" My original stuff
let g:solarized_termcolors=256
if ! has("gui_running")
    set t_Co=256
endif
" feel free to choose :set background=light for a different style
set background=dark
if &diff
    colorscheme peaksea
else
    colorscheme solarized
endif

set diffopt+=iwhite

set autoindent
set smartindent
set smarttab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

" Removes trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

autocmd FileType ruby setlocal ts=2 sw=2 expandtab
autocmd FileType yaml setlocal ts=2 sw=2 expandtab
autocmd FileType make setlocal ts=4 sts=0 sw=4 noexpandtab

noremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

let g:ctrlp_custom_ignore = {
    \ 'dir': 'app\/cache'
    \ }

let s:uname = system("echo -n \"$(uname)\"")
if !v:shell_error && s:uname == "Linux"
    " let g:NERDTreeDirArrows=0
endif

set number

" hi User1 ctermbg=yellow ctermfg=black guibg=yellow guifg=black
" let g:buftabs_active_highlight_group="User1"
" let g:buftabs_only_basename=1
" set laststatus=2
" let g:buftabs_in_statusline=1

" returns true iff is NERDTree open/active
function! s:isNTOpen()
  return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
endfunction

" calls NERDTreeFind iff NERDTree is active, current window contains a modifiable file, and we're not in vimdiff
function! s:syncTree()
  if &modifiable && s:isNTOpen() && strlen(expand('%')) > 0 && !&diff
    NERDTreeFind
    wincmd p
  endif
endfunction

autocmd BufEnter * call s:syncTree()

set hlsearch

function! DoPrettyXML()
  " save the filetype so we can restore it later
  let l:origft = &ft
  set ft=
  " delete the xml header if it exists. This will
  " permit us to surround the document with fake tags
  " without creating invalid xml.
  1s/<?xml .*?>//e
  " insert fake tags around the entire document.
  " This will permit us to pretty-format excerpts of
  " XML that may contain multiple top-level elements.
  0put ='<PrettyXML>'
  $put ='</PrettyXML>'
  silent %!xmllint --format -
  " xmllint will insert an <?xml?> header. it's easy enough to delete
  " if you don't want it.
  " delete the fake tags
  2d
  $d
  " restore the 'normal' indentation, which is one extra level
  " too deep due to the extra tags we wrapped around the document.
  silent %<
  " back to home
  1
  " restore the filetype
  exe "set ft=" . l:origft
endfunction
command! PrettyXML call DoPrettyXML()

let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
if executable('ag')
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

set colorcolumn=120

" See https://github.com/ryanoasis/vim-devicons
set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Nerd\ Font\ Complete\ 12
set encoding=utf-8
let g:airline_powerline_fonts=1
let g:airline#themes#solarized#palette = {}
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#buffer_nr_format = '%s-'
let g:airline#extensions#tabline#fnamecollapse = 1
let g:webdevicons_enable_airline_tabline = 0
let g:airline#extensions#whitespace#enabled = 1
